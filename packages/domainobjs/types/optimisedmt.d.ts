/** Declaration file generated by dts-gen */

declare module 'optimisedmt' {
    export class OptimisedMT {
        depth: number;
        zeroValue: bigint;
        leavesPerNode: number;
        hashFunc: (leaves: bigint[]) => bigint;
        nextIndex: number;
        zeros: bigint[];
        root: bigint;
        nodes: MTNode;
        numNodes: number;
        capacity: number;
        constructor(_depth: number, _zeroValue: bigint, _leavesPerNode: number, _hashFunc: (leaves: bigint[]) => bigint);

        copy(): OptimisedMT;

        genMerklePath(_index: number): MerkleProof;

        genMerkleSubrootPath(_startIndex: number, _endIndex: number): MerkleProof;

        getChildIndices(_index: number): number[];

        getLeaf(_index: number): bigint;

        getNode(_index: number): bigint;

        getParentIndices(_index: number): number[];

        insert(_value: Leaf): void;

        setNode(_index: number, _value: bigint): void;

        update(_index: number, _value: Leaf): void;

        serialize(): string;

        static calcChildIndices(_index: number, _leavesPerNode: number, _depth: number): number[];

        static calcParentIndices(_index: number, _leavesPerNode: number, _depth: number): number[];

        static unserialize(s: string): OptimisedMT;

        static verifyMerklePath(_proof: MerkleProof, _hashFunc: (leaves: bigint[]) => bigint): any;

    }
}